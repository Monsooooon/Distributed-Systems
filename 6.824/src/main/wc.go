package main

import (
	"fmt"
	"mapreduce"
	"os"
	"unicode"
	"strconv"
)

//
// The map function is called once for each file of input. The first
// argument is the name of the input file, and the second is the
// file's complete contents. You should ignore the input file name,
// and look only at the contents argument. The return value is a slice
// of key/value pairs.
//
func mapF(filename string, contents string) []mapreduce.KeyValue {
	// TODO: you have to write this function
    word_count := make(map[string]int)
    letter_start_index := -1
    for i, c := range contents {
        if unicode.IsLetter(c) {
            if letter_start_index == -1 {
                letter_start_index = i
            }
        } else {
            if letter_start_index != -1 {
                word := contents[letter_start_index:i]
                word_count[word]++
            }
            letter_start_index = -1
        }
    }

    var intermediate_result []mapreduce.KeyValue
    for word, count := range word_count {
        intermediate_result = append(intermediate_result, mapreduce.KeyValue{word, strconv.Itoa(count)})
    }

    return intermediate_result
}

//
// The reduce function is called once for each key generated by the
// map tasks, with a list of all the values created for that key by
// any map task.
//
func reduceF(key string, values []string) string {
	// TODO: you also have to write this function
    total_count := 0
    for _, count := range values {
        digit_count, err := strconv.Atoi(count)
        if err != nil {
            fmt.Println("Atoi errr:", err)
        } else {
            total_count += digit_count
        }
    }

    return strconv.Itoa(total_count)
}

// Can be run in 3 ways:
// 1) Sequential (e.g., go run wc.go master sequential x1.txt .. xN.txt)
// 2) Master (e.g., go run wc.go master localhost:7777 x1.txt .. xN.txt)
// 3) Worker (e.g., go run wc.go worker localhost:7777 localhost:7778 &)
func main() {
	if len(os.Args) < 4 {
		fmt.Printf("%s: see usage comments in file\n", os.Args[0])
	} else if os.Args[1] == "master" {
		var mr *mapreduce.Master
		if os.Args[2] == "sequential" {
			mr = mapreduce.Sequential("wcseq", os.Args[3:], 3, mapF, reduceF)
		} else {
			mr = mapreduce.Distributed("wcseq", os.Args[3:], 3, os.Args[2])
		}
		mr.Wait()
	} else {
		mapreduce.RunWorker(os.Args[2], os.Args[3], mapF, reduceF, 100)
	}
}
